name: libpymcr

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
  workflow_dispatch:

concurrency :
  group: ${{ github.workflow }}-${{ github.ref == 'refs/head/main' && github.run_number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  build_and_test:
    name: Build and test, ${{ matrix.variant.os }}, py${{ matrix.pyvariant.version }}
    runs-on: ${{ matrix.variant.os }}
    # Matlab only provides binaries for 64-bit systems - so force x86_64 builds
    strategy:
      fail-fast: false
      matrix:
        variant:
          - {os: ubuntu-22.04, matlab-version: R2020a, tag: manylinux_x86_64, mlprefix: /host/, mltag: glnxa64, zpsuf: .zip}
          - {os: macos-12, matlab-version: R2020a, tag: macosx_x86_64, mlprefix: '', mltag: maci64, zpsuf: .dmg.zip}
          - {os: windows-2022, matlab-version: R2021a, tag: win_amd64, mlprefix: '', mltag: win64, zpsuf: .zip}
        pyvariant: 
          - {version: '3.8', tag: cp38}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1.2.4
        with:
          release: ${{ matrix.variant.matlab-version }}
      - name: Get Matlab executable
        run: |
          echo "matlabExecutable=`which matlab`" >> $GITHUB_ENV
          echo "hostDirectory=`pwd`" >> $GITHUB_ENV
      - name: Build wheel
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BUILD: ${{ matrix.pyvariant.tag }}-${{ matrix.variant.tag }}
          CIBW_ENVIRONMENT: >-
            matlabExecutable="${{ matrix.variant.mlprefix }}${{ env.matlabExecutable }}"
            hostDirectory="${{ matrix.variant.mlprefix }}${{ env.hostDirectory }}"
          CIBW_BUILD_VERBOSITY: 1
          MACOSX_DEPLOYMENT_TARGET: "10.15"
      - name: Setup micromamba environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          micromamba-version: "1.1.0"
          environment-file: false
          environment-name: libpymcr-test
          channels: conda-forge
          extra-specs: |
            python=${{ matrix.pyvariant.version }}
            numpy
            six
            requests
      - name: Install wheel and run test
        if: ${{ matrix.variant.os == 'ubuntu-22.04' }}
        run: |
          python -m pip install wheelhouse/*
          python gist_test_ctf.py --get --token=${{ secrets.GH_GIST_TOKEN }}
          python test/run_test.py
      - name: Cache MCR
        if: ${{ matrix.variant.os != 'ubuntu-22.04' }}
        id: cache-installer
        uses: actions/cache@v1
        with:
          path: installer
          key: ${{ runner.os }}-matlab-R2020a-installer
      - name: Download MCR
        if: ${{ matrix.variant.os != 'ubuntu-22.04' && steps.cache-installer.outputs.cache-hit != 'true' }}
        run: wget --quiet --directory-prefix=installer https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/8/deployment_files/installer/complete/${{ matrix.variant.mltag }}/MATLAB_Runtime_R2020a_Update_8_${{ matrix.variant.mltag }}${{ matrix.variant.zpsuf }}
      - name: Install Mac MCR
        if: ${{ matrix.variant.os == 'macos-12' }}
        run: |
          unzip -d . -q installer/MATLAB_Runtime_R2020a_Update_8_maci64.dmg.zip
          hdiutil mount MATLAB_Runtime_R2020a_Update_8_maci64.dmg
          cp -R /Volumes/MATLAB_Runtime_R2020a_Update_8_maci64 .
          hdiutil unmount /Volumes/MATLAB_Runtime_R2020a_Update_8_maci64
          sudo ./MATLAB_Runtime_R2020a_Update_2_maci64/InstallForMacOSX.app/Contents/MacOS/InstallForMacOSX -mode silent -agreeToLicense yes
          MATLAB_RUNTIME_PATH=/Applications/MATLAB/MATLAB_Runtime/v98
          echo "MATLAB_RUNTIME_PATH=$MATLAB_RUNTIME_PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$MATLAB_RUNTIME_PATH/runtime/maci64:$MATLAB_RUNTIME_PATH/sys/os/maci64:$MATLAB_RUNTIME_PATH/bin/maci64" >> $GITHUB_ENV
          echo "$MATLAB_RUNTIME_PATH/bin/maci64" >> $GITHUB_PATH
      - name: Install Win MCR
        if: ${{ matrix.variant.os == 'windows-2022' }}
        run: |
          unzip -d . -q installer/MATLAB_Runtime_R2020a_Update_8_win64.zip
          ls installer
          ls installer/*
          ls installer/*/*
      - name: Run tests on Mac / Windows
        if: ${{ matrix.variant.os != 'ubuntu-22.04' }}
        run: |
          python test/run_test.py
      #- name: Setup tmate
      #  if: ${{ failure() }}
      #  uses: mxschmitt/action-tmate@v3
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.variant.os }}_artifacts.zip
          path: |
            wheelhouse/*
            *.mex*
