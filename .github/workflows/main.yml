name: libpymcr

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
  workflow_dispatch:

concurrency :
  group: ${{ github.workflow }}-${{ github.ref == 'refs/head/main' && github.run_number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  build_and_test:
    name: Build and test, ${{ matrix.variant.os }}, py${{ matrix.pyvariant.version }}
    runs-on: ${{ matrix.variant.os }}
    # Matlab only provides binaries for 64-bit systems - so force x86_64 builds
    strategy:
      fail-fast: false
      matrix:
        variant:
          - {os: ubuntu-22.04, matlab-version: R2020a, tag: manylinux_x86_64, mlprefix: /host/, mltag: glnxa64, zpsuf: .zip}
          - {os: macos-12, matlab-version: R2020a, tag: macosx_x86_64, mlprefix: '', mltag: maci64, zpsuf: .dmg.zip}
          - {os: windows-2022, matlab-version: R2021a, tag: win_amd64, mlprefix: '', mltag: win64, zpsuf: .zip}
        pyvariant:
          - {version: '3.8', tag: cp38}
    env:
      # MCRVER and MCRV must agree (R2020a is v98, R2022b is v913 etc)
      MCRVER: R2020a
      MCRV: v98
      MCRREL: 8

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up MATLAB
        if: ${{ matrix.variant.os == 'ubuntu-22.04' }}
        uses: matlab-actions/setup-matlab@v1.2.4
        with:
          release: ${{ matrix.variant.matlab-version }}
      - name: Cache MCR
        if: ${{ matrix.variant.os != 'ubuntu-22.04' }}
        id: cache-mcr
        uses: actions/cache@v3
        with:
          path: mcr
          key: ${{ runner.os }}-matlab-${{ env.MCRVER }}-mcr
      - name: Setup directories
        run: |
          mkdir -p mcr 
          echo "hostDirectory=`pwd`" >> $GITHUB_ENV
          if which matlab; then
            echo "matlabExecutable=`which matlab`" >> $GITHUB_ENV;
          else
            echo "matlabExecutable=`pwd`/mcr/bin/matlab" >> $GITHUB_ENV;
          fi
          # It runs the git bash shell by default which might not have wget
          if [[ "$OSTYPE" == "msys" ]]; then
            echo "PATH=$PATH:/c/msys64/usr/bin" >> $GITHUB_ENV;
          fi
      - name: Download MCR
        if: ${{ matrix.variant.os != 'ubuntu-22.04' && steps.cache-mcr.outputs.cache-hit != 'true' }}
        run: |
          SUBDIR=MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_
          URL_PREF=https://ssd.mathworks.com/supportfiles/downloads/${MCRVER}/Release/${MCRREL}/deployment_files/installer/complete/
          wget --quiet ${URL_PREF}${{ matrix.variant.mltag }}/${SUBDIR}${{ matrix.variant.mltag }}${{ matrix.variant.zpsuf }}
      - name: Install Mac MCR
        if: ${{ matrix.variant.os == 'macos-12' && steps.cache-mcr.outputs.cache-hit != 'true' }}
        run: |
          unzip -d . -q MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_maci64.dmg.zip
          hdiutil mount MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_maci64.dmg
          cp -R /Volumes/MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_maci64 .
          hdiutil unmount /Volumes/MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_maci64
          sudo ./MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_maci64/InstallForMacOSX.app/Contents/MacOS/InstallForMacOSX -mode silent -agreeToLicense yes
          cp -r /Applications/MATLAB/MATLAB_Runtime/${{ env.MCRV }}/* mcr/
      - name: Install Win MCR
        if: ${{ matrix.variant.os == 'windows-2022' && steps.cache-mcr.outputs.cache-hit != 'true' }}
        run: |
          unzip -d . -q MATLAB_Runtime_${MCRVER}_Update_${MCRREL}_win64.zip
          powershell -Command ".\setup.exe -mode silent -agreeToLicense yes"
          sleep 10
          powershell -Command "while(Get-Process setup_legacy -ErrorAction SilentlyContinue) { Start-Sleep -Seconds 10 }"
          cp -r /c/Program\ Files/MATLAB/MATLAB\ Runtime/${{ env.MCRV }}/* mcr/
      - name: Build wheel
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BUILD: ${{ matrix.pyvariant.tag }}-${{ matrix.variant.tag }}
          CIBW_ENVIRONMENT: >-
            matlabExecutable="${{ matrix.variant.mlprefix }}${{ env.matlabExecutable }}"
            hostDirectory="${{ matrix.variant.mlprefix }}${{ env.hostDirectory }}"
          CIBW_BUILD_VERBOSITY: 1
          MACOSX_DEPLOYMENT_TARGET: "10.15"
      - name: Setup micromamba environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          micromamba-version: "1.1.0"
          environment-file: false
          environment-name: libpymcr-test
          channels: conda-forge
          extra-specs: |
            python=${{ matrix.pyvariant.version }}
            numpy
            six
            requests
      - name: Install wheel and run test
        run: |
          python -m pip install wheelhouse/*
          python gist_test_ctf.py --get --token=${{ secrets.GH_GIST_TOKEN }}
          cd test
          python run_test.py
      - name: Setup tmate
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.variant.os }}_artifacts.zip
          path: |
            wheelhouse/*
            *.mex*
